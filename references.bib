@phdthesis{montesi-thesis,
    author  = "Fabrizio Montesi",
    title   = "Choreographic Programming",
    school  = "IT University of Copenhagen",
    year    = "2013",
    url     = "https://www.fabriziomontesi.com/files/choreographic-programming.pdf"
}

@book{montesi-textbook,
    place={Cambridge},
    title={Introduction to Choreographies},
    DOI={10.1017/9781108981491},
    publisher={Cambridge University Press},
    author={Montesi, Fabrizio},
    year={2023}
}

@article{deadlock-free-by-design, author = {Carbone, Marco and Montesi, Fabrizio}, title = {Deadlock-freedom-by-design: multiparty asynchronous global programming}, year = {2013}, issue_date = {January 2013}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, volume = {48}, number = {1}, issn = {0362-1340}, url = {https://doi.org/10.1145/2480359.2429101}, doi = {10.1145/2480359.2429101}, abstract = {Over the last decade, global descriptions have been successfully employed for the verification and implementation of communicating systems, respectively as protocol specifications and choreographies. In this work, we bring these two practices together by proposing a purely-global programming model. We show a novel interpretation of asynchrony and parallelism in a global setting and develop a typing discipline that verifies choreographies against protocol specifications, based on multiparty sessions. Exploiting the nature of global descriptions, our type system defines a new class of deadlock-free concurrent systems (deadlock-freedom-by-design), provides type inference, and supports session mobility. We give a notion of Endpoint Projection (EPP) which generates correct entity code (as pi-calculus terms) from a choreography. Finally, we evaluate our approach by providing a prototype implementation for a concrete programming language and by applying it to some examples from multicore and service-oriented programming.}, journal = {SIGPLAN Not.}, month = jan, pages = {263–274}, numpages = {12}, keywords = {types, sessions, concurrency, choreography} }

@InProceedings{aiocj,
author="Dalla Preda, Mila
and Giallorenzo, Saverio
and Lanese, Ivan
and Mauro, Jacopo
and Gabbrielli, Maurizio",
editor="Combemale, Beno{\^i}t
and Pearce, David J.
and Barais, Olivier
and Vinju, Jurgen J.",
title="AIOCJ: A Choreographic Framework for Safe Adaptive Distributed Applications",
booktitle="Software Language Engineering",
year="2014",
publisher="Springer International Publishing",
address="Cham",
pages="161--170",
abstract="We present AIOCJ, a framework for programming distributed adaptive applications. Applications are programmed using AIOC, a choreographic language suited for expressing patterns of interaction from a global point of view. AIOC allows the programmer to specify which parts of the application can be adapted. Adaptation takes place at runtime by means of rules, which can change during the execution to tackle possibly unforeseen adaptation needs. AIOCJ relies on a solid theory that ensures applications to be deadlock-free by construction also after adaptation. We describe the architecture of AIOCJ, the design of the AIOC language, and an empirical validation of the framework.",
isbn="978-3-319-11245-9"
}

@article{choral, author = {Giallorenzo, Saverio and Montesi, Fabrizio and Peressotti, Marco}, title = {Choral: Object-oriented Choreographic Programming}, year = {2024}, issue_date = {March 2024}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, volume = {46}, number = {1}, issn = {0164-0925}, url = {https://doi.org/10.1145/3632398}, doi = {10.1145/3632398}, abstract = {Choreographies are coordination plans for concurrent and distributed systems, which define the roles of the involved participants and how they are supposed to work together. In the paradigm of choreographic programming, choreographies are programs that can be compiled into executable implementations.In this article, we present Choral, the first choreographic programming language based on mainstream abstractions. The key idea in Choral is a new notion of data type, which allows for expressing that data is distributed over different roles. We use this idea to reconstruct the paradigm of choreographic programming through object-oriented abstractions. Choreographies are classes, and instances of choreographies are objects with states and behaviours implemented collaboratively by roles.Choral comes with a compiler that, given a choreography, generates an implementation for each of its roles. These implementations are libraries in pure Java, whose types are under the control of the Choral programmer. Developers can then modularly compose these libraries in their programs, to participate correctly in choreographies. Choral is the first incarnation of choreographic programming offering such modularity, which finally connects more than a decade of research on the paradigm to practical software development.The integration of choreographic and object-oriented programming yields other powerful advantages, where the features of one paradigm benefit the other in ways that go beyond the sum of the parts. On the one hand, the high-level abstractions and static checks from the world of choreographies can be used to write concurrent and distributed object-oriented software more concisely and correctly. On the other hand, we obtain a much more expressive choreographic language from object-oriented abstractions than in previous work. This expressivity allows for writing more reusable and flexible choreographies. For example, object passing makes Choral the first higher-order choreographic programming language, whereby choreographies can be parameterised over other choreographies without any need for central coordination. We also extend method overloading to a new dimension: specialisation based on data location. Together with subtyping and generics, this allows Choral to elegantly support user-defined communication mechanisms and middleware.}, journal = {ACM Trans. Program. Lang. Syst.}, month = jan, articleno = {1}, numpages = {59}, keywords = {Choreographies, communication, higher-kinded types} }

@article{pirouette, author = {Hirsch, Andrew K. and Garg, Deepak}, title = {Pirouette: higher-order typed functional choreographies}, year = {2022}, issue_date = {January 2022}, publisher = {Association for Computing Machinery}, address = {New York, NY, USA}, volume = {6}, number = {POPL}, url = {https://doi.org/10.1145/3498684}, doi = {10.1145/3498684}, abstract = {We present Pirouette, a language for typed higher-order functional choreographic programming. Pirouette offers programmers the ability to write a centralized functional program and compile it via endpoint projection into programs for each node in a distributed system. Moreover, Pirouette is defined generically over a (local) language of messages, and lifts guarantees about the message type system to its own. Message type soundness also guarantees deadlock freedom. All of our results are verified in Coq.}, journal = {Proc. ACM Program. Lang.}, month = jan, articleno = {23}, numpages = {27}, keywords = {Functional Programming, Concurrency, Choreographies} }

@article{haschor,
    author = {Shen, Gan and Kashiwa, Shun and Kuper, Lindsey},
    title = {HasChor: Functional Choreographic Programming for All (Functional Pearl)},
    year = {2023},
    issue_date = {August 2023},
    publisher = {Association for Computing Machinery},
    address = {New York, NY, USA},
    volume = {7},
    number = {ICFP},
    url = {https://doi.org/10.1145/3607849},
    doi = {10.1145/3607849},
    month = aug,
    articleno = {207},
    numpages = {25}
}

@misc{chorus,
    title={Portable, Efficient, and Practical Library-Level Choreographic Programming},
    author={Shun Kashiwa and Gan Shen and Soroush Zare and Lindsey Kuper},
    year={2023},
    eprint={2311.11472},
    archivePrefix={arXiv},
    primaryClass={cs.PL}
}

@InProceedings{chor-lambda,
author="Cruz-Filipe, Lu{\'i}s
and Graversen, Eva
and Lugovi{\'{c}}, Lovro
and Montesi, Fabrizio
and Peressotti, Marco",
editor="Seidl, Helmut
and Liu, Zhiming
and Pasareanu, Corina S.",
title="Functional Choreographic Programming",
booktitle="Theoretical Aspects of Computing -- ICTAC 2022",
year="2022",
publisher="Springer International Publishing",
address="Cham",
pages="212--237",
abstract="Choreographic programming is an emerging programming paradigm for concurrent and distributed systems, where developers write the communications that should be enacted and a compiler then automatically generates a distributed implementation.",
isbn="978-3-031-17715-6"
}

@article{CC,
title = {A core model for choreographic programming},
journal = {Theoretical Computer Science},
volume = {802},
pages = {38-66},
year = {2020},
issn = {0304-3975},
doi = {https://doi.org/10.1016/j.tcs.2019.07.005},
url = {https://www.sciencedirect.com/science/article/pii/S0304397519304311},
author = {Luís Cruz-Filipe and Fabrizio Montesi},
keywords = {Choreography, Computability, Process calculi},
abstract = {Choreographic Programming is a paradigm for developing concurrent programs that are deadlock-free by construction, as a result of programming communications declaratively and then synthesising process implementations automatically. Despite strong interest on choreographies, a foundational model that explains which computations can be performed with the hallmark constructs of choreographies is still missing. In this work, we introduce Core Choreographies (CC), a model that includes only the core primitives of choreographic programming. Every computable function can be implemented as a choreography in CC, from which we can synthesise a process implementation where independent computations run in parallel. We discuss the design of CC and argue that it constitutes a canonical model for choreographic programming.}
}

@inproceedings{map-reduce,title	= {MapReduce: Simplified Data Processing on Large Clusters},author	= {Jeffrey Dean and Sanjay Ghemawat},year	= {2004},booktitle	= {OSDI'04: Sixth Symposium on Operating System Design and Implementation},pages	= {137--150},address	= {San Francisco, CA}}

@article{irc,
  title={Real-World Choreographic Programming: Full-Duplex Asynchrony and Interoperability},
  author={Lugovi{\'c}, Lovro and Montesi, Fabrizio},
  journal={arXiv preprint arXiv:2303.03983},
  year={2023}
}